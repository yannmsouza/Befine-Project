{"version":3,"sources":["../../../src/models/users.js"],"names":["findAll","callback","global","conn","collection","find","toArray","findUser","req","params","idUser","insertUser","user","senha_criptografada","crypto","createHash","update","password","digest","console","log","insert","Users","res","err","docs","status","json","error"],"mappings":";;;;;;qjBAAA;;;;AAIA;;;;AACA;;;;AACA;;;;;;;;AAGA,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACvBC,WAAOC,IAAP,CAAYC,UAAZ,CAAuB,OAAvB,EAAgCC,IAAhC,GAAuCC,OAAvC,CAA+CL,QAA/C;AACH;;AAED,SAASM,QAAT,CAAkBC,GAAlB,EAAuBP,QAAvB,EAAiC;AAC7BC,WAAOC,IAAP,CAAYC,UAAZ,CAAuB,OAAvB,EAAgCC,IAAhC,CAAqC,uBAASG,IAAIC,MAAJ,CAAWC,MAApB,CAArC,EAAkEJ,OAAlE,CAA0EL,QAA1E;AACH;;AAED,SAASU,UAAT,CAAoBC,IAApB,EAA0BX,QAA1B,EAAoC;AAChC,QAAIY,sBAAsBC,iBAAOC,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCJ,KAAKK,QAArC,EAA+CC,MAA/C,CAAsD,KAAtD,CAA1B;;AAEAN,SAAKK,QAAL,GAAgBJ,mBAAhB;AACAM,YAAQC,GAAR,CAAYR,KAAKK,QAAjB;AACAf,WAAOC,IAAP,CAAYC,UAAZ,CAAuB,OAAvB,EAAgCiB,MAAhC,CAAuCT,IAAvC,EAA6CX,QAA7C;AACA;AACH;;AAED;;IAEMqB,K;;;;;;;;AACF;;;oCAGYC,G,EAAI;AACZJ,oBAAQC,GAAR,CAAY,MAAZ;AACA;AACApB,oBAAQ,UAACwB,GAAD,EAAMC,IAAN,EAAe;AACnB,oBAAID,GAAJ,EAAS;AACLD,wBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACH,iBAFD,MAEO;AACHD,wBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,SAASF,IAAX,EAArB;AACH;AACJ,aAND;AAQH;;AAED;;;;mCACWjB,G,EAAKe,G,EAAI;AAChB;AACAhB,qBAASC,GAAT,EAAc,UAACgB,GAAD,EAAMC,IAAN,EAAe;AACzB,oBAAID,GAAJ,EAAS;AACLD,wBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACH,iBAFD,MAEO;AACHD,wBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,QAAQF,IAAV,EAArB;AACH;AACJ,aAND;AAQH;;AAED;;;;qCACab,I,EAAMW,G,EAAK;AACpB;AACAZ,uBAAWC,IAAX,EAAiB,UAAUY,GAAV,EAAe;AAC5B,oBAAIA,GAAJ,EAAS;AACL;AACAD,wBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACH,iBAHD,MAGO;AACH;AACAD,wBAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,UAAU,sBAAZ,EAArB;AACH;AAEJ,aATD;AAWH;;;;;AAEL;;kBAEeL,K","file":"users.js","sourcesContent":["/*\r\n    Arquivo nÃ£o utilizado\r\n*/\r\n\r\nimport crypto from 'crypto';\r\nimport objectId from 'mongodb';\r\nimport dbConnection from '../config/dbConnection';\r\n\r\n\r\nfunction findAll(callback) {\r\n    global.conn.collection('users').find().toArray(callback);\r\n}\r\n\r\nfunction findUser(req, callback) {\r\n    global.conn.collection('users').find(objectId(req.params.idUser)).toArray(callback);\r\n}\r\n\r\nfunction insertUser(user, callback) {\r\n    var senha_criptografada = crypto.createHash(\"md5\").update(user.password).digest('hex');\r\n    \r\n    user.password = senha_criptografada;\r\n    console.log(user.password);\r\n    global.conn.collection('users').insert(user, callback);\r\n    //console.log(senha_criptografada);\r\n}\r\n\r\n////////////\r\n\r\nclass Users {\r\n    //Retorna todos os usuarios\r\n\r\n\r\n    returnUsers(res){\r\n        console.log('aqui');\r\n        dbConnection();\r\n        findAll((err, docs) => {\r\n            if (err) {\r\n                res.status(500).json({ error: err });\r\n            } else {\r\n                res.status(200).json({ 'users': docs });\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    //Retorna Somente um Usuario pelo ID\r\n    returnUser(req, res){\r\n        dbConnection();\r\n        findUser(req, (err, docs) => {\r\n            if (err) {\r\n                res.status(500).json({ error: err });\r\n            } else {\r\n                res.status(200).json({ 'user': docs });\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    //Registra um Usuario\r\n    registerUser(user, res) {\r\n        dbConnection();\r\n        insertUser(user, function (err) {\r\n            if (err) {\r\n                //Status: Internal Server Error\r\n                res.status(500).json({ error: err });\r\n            } else {\r\n                //Status: Success\r\n                res.status(200).json({ 'status': 'successful insertion' });\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n}\r\n//TODO: UPDATE, DELETE\r\n\r\nexport default Users;"]}