{"version":3,"sources":["../../../src/controllers/users.js"],"names":["UsersController","req","res","global","conn","collection","find","toArray","err","docs","status","json","error","console","log","params","idUser","mongodb","ObjectId","user","body","name","length","email","age","password","senha_criptografada","crypto","createHash","update","digest","insert"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAGA;;IAEMA,e;;;;;;;;AACF;kCACUC,G,EAAKC,G,EAAI;AACf;AACAC,mBAAOC,IAAP,CAAYC,UAAZ,CAAuB,OAAvB,EAAgCC,IAAhC,GAAuCC,OAAvC,CACI,UAACC,GAAD,EAAMC,IAAN,EAAe;AACX,oBAAID,GAAJ,EAAS;AACLN,wBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACH,iBAFD,MAEO;AACHN,wBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,SAASF,IAAX,EAArB;AACH;AAEJ,aARL;AASH;;;;;AAED;mCACWR,G,EAAKC,G,EAAI;AAChBW,oBAAQC,GAAR,CAAYb,IAAIc,MAAJ,CAAWC,MAAvB;AACAb,mBAAOC,IAAP,CAAYC,UAAZ,CAAuB,OAAvB,EAAgCC,IAAhC,CAAqCW,kBAAQC,QAAR,CAAiBjB,IAAIc,MAAJ,CAAWC,MAA5B,CAArC,EAA0ET,OAA1E,CACI,UAACC,GAAD,EAAMC,IAAN,EAAe;AACX,oBAAID,GAAJ,EAAS;AACLN,wBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACH,iBAFD,MAEO;AACHN,wBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,QAAQF,IAAV,EAArB;AACH;AAEJ,aARL;AASH;;;;;AAGD;iCACSR,G,EAAKC,G,EAAK;;AAEf,gBAAIiB,OAAOlB,IAAImB,IAAf;;AAEA,gBAAG,CAACD,KAAKE,IAAL,CAAUC,MAAd,EAAsB;AAClBpB,oBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,6BAAT,EAArB;AACA;AACH,aAHD,MAGO,IAAG,CAACO,KAAKI,KAAL,CAAWD,MAAf,EAAuB;AAC1BpB,oBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,8BAAT,EAArB;AACA;AACH,aAHM,MAGA,IAAG,CAACO,KAAKK,GAAL,CAASF,MAAV,IAAoBH,KAAKK,GAAL,GAAW,CAAlC,EAAqC;AACxCtB,oBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,kCAAT,EAArB;AACA;AACH,aAHM,MAGC,IAAG,CAACO,KAAKM,QAAL,CAAcH,MAAf,IAAyBH,KAAKM,QAAL,GAAgB,CAA5C,EAA+C;AACnDvB,oBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,uCAAT,EAArB;AACA;AACH;;AAED,gBAAIc,sBAAsBC,iBAAOC,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCV,KAAKM,QAArC,EAA+CK,MAA/C,CAAsD,KAAtD,CAA1B;;AAEAX,iBAAKM,QAAL,GAAgBC,mBAAhB;;AAEAvB,mBAAOC,IAAP,CAAYC,UAAZ,CAAuB,OAAvB,EAAgC0B,MAAhC,CAAuCZ,IAAvC,EAA6C,UAACX,GAAD,EAAS;AAClD,oBAAIA,GAAJ,EAAS;AACL;AACAN,wBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACH,iBAHD,MAGO;AACH;AACAN,wBAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,UAAU,sBAAZ,EAArB;AACH;AACJ,aARD;AASH;;;;;;kBAIUX,e","file":"users.js","sourcesContent":["import Users from '../models/users';\r\nimport crypto from 'crypto';\r\nimport mongodb from 'mongodb';\r\n\r\n\r\n// const users = new Users();\r\n\r\nclass UsersController {\r\n    //Todos os Usuarios\r\n    returnAll(req, res){\r\n        // dbConnection();\r\n        global.conn.collection('users').find().toArray(\r\n            (err, docs) => {\r\n                if (err) {\r\n                    res.status(500).json({ error: err });\r\n                } else {\r\n                    res.status(200).json({ 'users': docs });\r\n                }\r\n\r\n            });\r\n    };\r\n\r\n    //Somente um Usuario\r\n    returnUser(req, res){\r\n        console.log(req.params.idUser);\r\n        global.conn.collection('users').find(mongodb.ObjectId(req.params.idUser)).toArray(\r\n            (err, docs) => {\r\n                if (err) {\r\n                    res.status(500).json({ error: err });\r\n                } else {\r\n                    res.status(200).json({ 'user': docs });\r\n                }\r\n            \r\n            });\r\n    };\r\n\r\n\r\n    //Registra um Usuario\r\n    register(req, res) {\r\n\r\n        var user = req.body;\r\n\r\n        if(!user.name.length) {\r\n            res.status(500).json({ error: 'Name: field cannot be empty' });\r\n            return;\r\n        } else if(!user.email.length) {\r\n            res.status(500).json({ error: 'Email: field cannot be empty' });\r\n            return;\r\n        } else if(!user.age.length || user.age < 5) {\r\n            res.status(500).json({ error: 'Age: please, enter a valid value' });\r\n            return;\r\n        }  else if(!user.password.length || user.password < 8) {\r\n            res.status(500).json({ error: 'Password: please, enter a valid value' });\r\n            return;\r\n        }\r\n\r\n        var senha_criptografada = crypto.createHash(\"md5\").update(user.password).digest('hex');\r\n\r\n        user.password = senha_criptografada;\r\n\r\n        global.conn.collection('users').insert(user, (err) => {\r\n            if (err) {\r\n                //Status: Internal Server Error\r\n                res.status(500).json({ error: err });\r\n            } else {\r\n                //Status: Success\r\n                res.status(200).json({ 'status': 'successful insertion' });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n}\r\nexport default UsersController;"]}